# -*- coding: utf-8 -*-
"""Web Mining-streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rFKWC84ZQgC1N5ZXe9hpYAK_TIiAf_SI

## **Parte 1: Instalacion de Autoviz**
Nota:  Se monta el drive para guardar los gráficos
"""
import streamlit as st

st.title("Análisis de Datos Financieros Argentinos")
st.header("Respaldo y Presión Cambiaria")

#!pip install autoviz
from autoviz.AutoViz_Class import AutoViz_Class

from google.colab import drive
drive.mount('/content/drive')

import os

output_folder = '/content/drive/MyDrive/AutoViz_Plots'
os.makedirs(output_folder, exist_ok=True)

"""## **Parte 2: Respaldo y presión cambiaria**

#### **Configuración inicial: librerías y parámetros**
"""

import requests
import pandas as pd
import plotly.graph_objects as go
import yfinance as yf
from datetime import datetime
from autoviz.AutoViz_Class import AutoViz_Class
!pip install yfinance --quiet
import yfinance as yf
import plotly.graph_objects as go

# Parámetros de fecha
# fecha_inicio = "2022-01-01"
# fecha_fin = "2025-04-27"

fecha_inicio = st.date_input("Fecha de inicio", datetime(2022, 1, 1))
fecha_fin = st.date_input("Fecha de fin", datetime.today())



"""#### **Funciones reutilizables**"""

def get_bcra_variable(id_variable, fecha_inicio, fecha_fin):
    url = f"https://api.bcra.gob.ar/estadisticas/v3.0/monetarias/{id_variable}"
    params = {"desde": fecha_inicio, "hasta": fecha_fin, "limit": 3000}
    r = requests.get(url, params=params, verify=False)
    if r.status_code == 200:
        df = pd.DataFrame(r.json()["results"])
        df["fecha"] = pd.to_datetime(df["fecha"])
        return df[["fecha", "valor"]]
    else:
        raise Exception(f"Error al obtener variable {id_variable}")

def get_variable_name(id_variable):
    url = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias"
    r = requests.get(url, verify=False)
    if r.status_code == 200:
        df = pd.DataFrame(r.json()["results"])
        return df[df["idVariable"] == id_variable]["descripcion"].values[0]
    return f"Variable {id_variable}"

def get_usd_oficial(fecha_inicio, fecha_fin):
    url = "https://api.bcra.gob.ar/estadisticascambiarias/v1.0/Cotizaciones/USD"
    params = {"fechadesde": fecha_inicio, "fechahasta": fecha_fin, "limit": 1000}
    r = requests.get(url, params=params, verify=False)
    data = r.json()["results"]
    registros = []
    for d in data:
        fecha = d["fecha"]
        for cot in d["detalle"]:
            registros.append({"fecha": fecha, "usd_oficial": cot["tipoCotizacion"]})
    df = pd.DataFrame(registros)
    df["fecha"] = pd.to_datetime(df["fecha"])
    return df.groupby("fecha").mean().reset_index()

def get_usd_blue():
    url = "https://api.bluelytics.com.ar/v2/evolution.json"
    r = requests.get(url)
    data = r.json()

    # Filtrar solo entradas del tipo Blue
    blue_data = [entry for entry in data if entry["source"] == "Blue"]

    # Crear DataFrame
    df = pd.DataFrame(blue_data)

    # Convertir fechas
    df["fecha"] = pd.to_datetime(df["date"])

    # Promedio entre compra y venta
    df["usd_blue"] = (df["value_buy"] + df["value_sell"]) / 2

    return df[["fecha", "usd_blue"]]


def get_cny_oficial(fecha_inicio, fecha_fin):
    url = "https://api.bcra.gob.ar/estadisticascambiarias/v1.0/Cotizaciones/CNY"
    params = {"fechadesde": fecha_inicio, "fechahasta": fecha_fin, "limit": 1000}
    r = requests.get(url, params=params, verify=False)
    if r.status_code == 200:
        data = r.json()["results"]
        registros = []
        for d in data:
            fecha = d["fecha"]
            for cot in d["detalle"]:
                registros.append({"fecha": fecha, "cny_oficial": cot["tipoCotizacion"]})
        df = pd.DataFrame(registros)
        df["fecha"] = pd.to_datetime(df["fecha"])
        return df.groupby("fecha").mean().reset_index()
    else:
        raise Exception("Error al obtener CNY Oficial")

"""#### **Obtener y combinar las series**"""

# IDs de las variables BCRA
id_base_monetaria = 15    # Base monetaria
id_reservas = 1          # Reservas internacionales

# Descargar variables BCRA
df_base = get_bcra_variable(id_base_monetaria, fecha_inicio, fecha_fin).rename(columns={"valor": "base_monetaria"})
df_reservas = get_bcra_variable(id_reservas, fecha_inicio, fecha_fin).rename(columns={"valor": "reservas"})

# Dólares
df_usd_oficial = get_usd_oficial(fecha_inicio, fecha_fin)
df_usd_blue = get_usd_blue()

# Yuan
df_cny = get_cny_oficial(fecha_inicio, fecha_fin)

# Unir todas las series
df = pd.merge(df_base, df_reservas, on="fecha", how="outer")
df = pd.merge(df, df_usd_oficial, on="fecha", how="outer")
df = pd.merge(df, df_usd_blue, on="fecha", how="outer")
df = pd.merge(df, df_cny, on="fecha", how="outer")

# Ordenar por fecha
df = df.sort_values("fecha").reset_index(drop=True)

# Base monetaria en USD
df["base_usd"] = df["base_monetaria"] / df["usd_oficial"]

df.tail()

# Guardar el dataframe df como un archivo CSV temporal
df.to_csv('/tmp/df_bcra.csv', index=False)

AV = AutoViz_Class()
df_auto = AV.AutoViz("/tmp/df_bcra.csv", chart_format="png")  # Cambié el formato a "png" por si ayuda.

# Forzar la visualización de gráficos
import matplotlib.pyplot as plt
plt.show()

"""#### **Gráfico Respaldo y Presión Cambiaria**"""

df = df[df["fecha"] >= "2022-01-01"]

fig = go.Figure()


# Trazas
fig.add_trace(go.Scatter(x=df["fecha"], y=df["base_usd"],
                         name="Base monetaria en USD",
                         mode="lines", line=dict(color="royalblue")))

fig.add_trace(go.Scatter(x=df["fecha"], y=df["reservas"],
                         name="Reservas netas internacionales",
                         mode="lines", line=dict(color="firebrick")))

fig.add_trace(go.Scatter(x=df["fecha"], y=df["usd_blue"],
                         name="Tipo de cambio paralelo (Blue)",
                         mode="lines", yaxis="y2", line=dict(color="seagreen")))

fig.add_trace(go.Scatter(x=df["fecha"], y=df["usd_oficial"],
                         name="Tipo de cambio oficial",
                         mode="lines", yaxis="y2",
                         line=dict(color="mediumseagreen", dash="dot")))

# Estilo y layout
fig.update_layout(
    font=dict(family="Montserrat", size=14),
    height=600,
    title=dict(
        text="Respaldo y presión cambiaria",
        x=0.5,
        xanchor="center",
        font=dict(size=20)
    ),
    xaxis=dict(
        title="Fecha",
        rangeselector=dict(
            buttons=list([
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=3, label="3m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(step="all")
            ])
        ),
        rangeslider=dict(visible=True),
        type="date"
    ),
    yaxis=dict(
        title="Reservas / Base Monetaria (en USD)",
        titlefont=dict(color="royalblue"),
        tickfont=dict(color="royalblue"),
        autorange=True
    ),
    yaxis2=dict(
        title="Tipo de cambio (ARS/USD)",
        titlefont=dict(color="seagreen"),
        tickfont=dict(color="seagreen"),
        overlaying="y",
        side="right",
        autorange=True
    ),
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.3,
        xanchor="center",
        x=0.5
    ),
    margin=dict(b=120)  # espacio inferior para la leyenda
)

#fig.show()
st.plotly_chart(fig)

"""---

## **Parte 3: Confianza del mercado - Merval en USD**

#### **Obtener el Merval (índice en pesos argentinos)**

#### **Unir con tipo de cambio paralelo (blue) y calcular Merval en USD**
"""

# Descargar Merval (^MERV)
merval = yf.download("^MERV", start="2024-01-01")

# Extraer la columna 'Close'
merval_close = merval.xs("Close", axis=1, level="Price")

# Renombrar y preparar
merval = merval_close.rename(columns={"^MERV": "merval_ars"}).reset_index()
merval = merval.rename(columns={"Date": "fecha"})  # ✅ renombrar fecha

# Tipo de cambio blue (asegurar unicidad)
df_usd_blue_unique = df[["fecha", "usd_blue"]].dropna().drop_duplicates()

# Merge y cálculo
df_merval = pd.merge(merval, df_usd_blue_unique, on="fecha", how="inner")
df_merval["merval_usd"] = df_merval["merval_ars"] / df_merval["usd_blue"]

"""#### **Gráfico interactivo con Plotly**"""

fig3 = go.Figure()

fig3.add_trace(go.Scatter(
    x=df_merval["fecha"],
    y=df_merval["merval_usd"],
    mode="lines",
    name="Merval en USD",
    line=dict(color="darkblue")
))

fig3.update_layout(
    title=dict(
        text="Confianza del mercado: Merval en USD",
        x=0.5,
        xanchor="center",
        font=dict(family="Montserrat", size=20)
    ),
    font=dict(family="Montserrat", size=14),
    xaxis=dict(
        title="Fecha",
        type="date",
        rangeselector=dict(
            buttons=list([
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=3, label="3m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(step="all")
            ])
        ),
        rangeslider=dict(visible=True)
    ),
    yaxis=dict(
        title="Índice Merval (USD)",
        autorange=True
    ),
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.3,
        xanchor="center",
        x=0.5
    ),
    margin=dict(b=120),
    hovermode="x unified"
)

fig3.show()

# Inflación mensual (ID 27)
id_inflacion = 27
df_inflacion = get_bcra_variable(id_inflacion, "2024-08-01", "2025-04-30")
df_inflacion = df_inflacion.rename(columns={"valor": "inflacion_mensual"})
df_inflacion = df_inflacion.sort_values("fecha").reset_index(drop=True)



# Último valor y mes
ultimo_valor = df_inflacion["inflacion_mensual"].iloc[-1]
ultimo_mes = df_inflacion["fecha"].dt.strftime("%B %Y").iloc[-1]

fig_inflacion = go.Figure()

# Línea suavizada con área rellena
fig_inflacion.add_trace(go.Scatter(
    x=df_inflacion["fecha"],
    y=df_inflacion["inflacion_mensual"],
    fill="tozeroy",
    mode="lines",
    line=dict(color="#1E90FF", width=3),
    name="Inflación mensual"
))

fig_inflacion.update_layout(
    paper_bgcolor="#0B2C66",
    plot_bgcolor="#0B2C66",
    font=dict(family="Segoe UI", size=13, color="white"),
    height=500,
    margin=dict(l=25, r=25, t=120, b=30),

    title=dict(
        text=f"<b>Inflación mensual</b><br><span style='font-size:14px'>{ultimo_mes}</span>",
        x=0.01,
        y=0.92,
        xanchor='left',
        yanchor='top',
        font=dict(size=18, color="white")
    ),

    annotations=[
        dict(
            x=-0.035,
            y=1.10,
            xref="paper", yref="paper",
            showarrow=False,
            text=f"<span style='font-size:24px'><b>{ultimo_valor:.1f} %</b></span>",
            font=dict(color="white"),
            align="left"
        )
    ],

    xaxis=dict(
        title="",
        showgrid=False,
        tickmode="array",
        tickvals=df_inflacion["fecha"],
        ticktext=[d.strftime('%b\n%Y') for d in df_inflacion["fecha"]],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    yaxis=dict(
        title="",
        showgrid=False,
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    hovermode="x unified",
    showlegend=False
)

fig_inflacion.show()

# Tasa política monetaria (ID 6 – TNA diaria)
id_tasa = 6
df_tasa = get_bcra_variable(id_tasa, "2024-08-01", "2025-04-30")
df_tasa = df_tasa.rename(columns={"valor": "tasa_monetaria"})
df_tasa["fecha"] = pd.to_datetime(df_tasa["fecha"])
df_tasa = df_tasa.sort_values("fecha")

# Agrupamos por mes y tomamos el último valor disponible
df_tasa["mes"] = df_tasa["fecha"].dt.to_period("M")
df_tasa_mensual = df_tasa.groupby("mes").last().reset_index()
df_tasa_mensual["fecha"] = df_tasa_mensual["mes"].dt.to_timestamp()
df_tasa_mensual.drop(columns="mes", inplace=True)

ultimo_valor_tasa = df_tasa_mensual["tasa_monetaria"].iloc[-1]
ultimo_mes_tasa = df_tasa_mensual["fecha"].dt.strftime("%B %Y").iloc[-1]

# Rango dinámico para eje Y
min_y = (df_tasa["tasa_monetaria"].min()) * 0.95
max_y = (df_tasa["tasa_monetaria"].max()) * 1.05


fig_tasa = go.Figure()

fig_tasa.add_trace(go.Scatter(
    x=df_tasa["fecha"],
    y=df_tasa["tasa_monetaria"],
    fill="tozeroy",
    mode="lines",
    line=dict(color="#1E90FF", width=3),
    name="Tasa Política Monetaria"
))

fig_tasa.update_layout(
    paper_bgcolor="#0B2C66",
    plot_bgcolor="#0B2C66",
    font=dict(family="Segoe UI", size=13, color="white"),
    height=300,
    margin=dict(l=25, r=25, t=100, b=30),

    title=dict(
        text=f"<b>Tasa de Política Monetaria</b><br><span style='font-size:14px'>{ultimo_mes_tasa}</span>",
        x=0.01,
        y=0.92,
        xanchor='left',
        yanchor='top',
        font=dict(size=18, color="white")
    ),

    annotations=[
        dict(
            x=-0.035,
            y=1.35,
            xref="paper", yref="paper",
            showarrow=False,
            text=f"<span style='font-size:24px'><b>{ultimo_valor_tasa:.1f} %</b></span>",
            font=dict(color="white"),
            align="left"
        )
    ],

    xaxis=dict(
        title="",
        showgrid=False,
        tickmode="array",
        tickvals=df_tasa_mensual["fecha"],
        ticktext=[d.strftime('%b\n%Y') for d in df_tasa_mensual["fecha"]],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    yaxis=dict(
        title="",
        showgrid=False,
        range=[min_y, max_y],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    hovermode="x unified",
    showlegend=False
)

fig_tasa.show()

# Reservas internacionales (ID 1)
id_reservas = 1
df_reservas = get_bcra_variable(id_reservas, "2024-08-01", "2025-04-30")
df_reservas = df_reservas.rename(columns={"valor": "reservas"})
df_reservas["fecha"] = pd.to_datetime(df_reservas["fecha"])
df_reservas = df_reservas.sort_values("fecha").reset_index(drop=True)

# Creamos los tickvals (uno por mes)
tickvals = pd.date_range(start="2024-08-01", end="2025-04-30", freq="MS")

# Último valor y mes
ultimo_valor_res = df_reservas["reservas"].iloc[-1]
ultimo_mes_res = df_reservas["fecha"].dt.strftime("%B %Y").iloc[-1]

# Rango dinámico para eje Y
min_y = (df_reservas["reservas"].min() / 1000) * 0.95
max_y = (df_reservas["reservas"].max() / 1000) * 1.05

# Gráfico
fig_reservas = go.Figure()

fig_reservas.add_trace(go.Scatter(
    x=df_reservas["fecha"],
    y=df_reservas["reservas"] / 1000,  # Lo mostramos en miles de millones
    fill="tozeroy",
    mode="lines",
    line=dict(color="#2ECC71", width=3),
    name="Reservas Internacionales"
))

fig_reservas.update_layout(
    paper_bgcolor="#0B2C66",
    plot_bgcolor="#0B2C66",
    font=dict(family="Segoe UI", size=13, color="white"),
    height=300,
    margin=dict(l=25, r=25, t=100, b=30),

    title=dict(
        text=f"<b>Reservas Internacionales</b><br><span style='font-size:14px'>{ultimo_mes_res}</span>",
        x=0.01,
        y=0.92,
        xanchor='left',
        yanchor='top',
        font=dict(size=18, color="white")
    ),

    annotations=[
        dict(
            x=-0.035,
            y=1.35,
            xref="paper", yref="paper",
            showarrow=False,
            text=f"<span style='font-size:24px'><b>{ultimo_valor_res/1000:,.1f} M</b></span>",
            font=dict(color="white"),
            align="left"
        )
    ],

    xaxis=dict(
        title="",
        showgrid=False,
        tickvals=tickvals,
        ticktext=[d.strftime('%b\n%Y') for d in tickvals],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    yaxis=dict(
        title="000's M USD",
        range=[min_y, max_y],
        showgrid=False,
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    hovermode="x unified",
    showlegend=False
)

# USD Oficial
df_usd_oficial = get_usd_oficial("2024-08-01", "2025-04-27")
df_usd_oficial = df_usd_oficial.rename(columns={"usd_oficial": "usd_oficial"})
df_usd_oficial["fecha"] = pd.to_datetime(df_usd_oficial["fecha"])
df_usd_oficial = df_usd_oficial.sort_values("fecha")

# USD Blue
df_usd_blue = get_usd_blue()
df_usd_blue = df_usd_blue[df_usd_blue["fecha"].between("2024-08-01", "2025-04-30")]
df_usd_blue = df_usd_blue.rename(columns={"usd_blue": "usd_blue"})
df_usd_blue["fecha"] = pd.to_datetime(df_usd_blue["fecha"])
df_usd_blue = df_usd_blue.sort_values("fecha")

# Merge para tener en un solo DataFrame
df_tc = pd.merge(df_usd_oficial, df_usd_blue, on="fecha", how="outer").sort_values("fecha")

# Crear ticks de eje x
tickvals = pd.date_range(start="2024-08-01", end="2025-04-30", freq="MS")

# Últimos valores
ultimo_valor_usd_oficial = df_tc["usd_oficial"].dropna().iloc[-1]
ultimo_valor_usd_blue = df_tc["usd_blue"].dropna().iloc[-1]
ultimo_mes_tc = df_tc["fecha"].dt.strftime("%B %Y").iloc[-1]

# Rango dinámico para eje Y
min_y = df_tc[["usd_oficial", "usd_blue"]].min().min() * 0.95
max_y = df_tc[["usd_oficial", "usd_blue"]].max().max() * 1.05

# Gráfico
fig_tc = go.Figure()

# USD Oficial
fig_tc.add_trace(go.Scatter(
    x=df_tc["fecha"],
    y=df_tc["usd_oficial"],
    fill="tozeroy",
    mode="lines",
    connectgaps=True,  # unir la línea aunque falten datos
    line=dict(color="#2ECC71", width=3),
    name="USD Oficial"
))

# USD Blue
fig_tc.add_trace(go.Scatter(
    x=df_tc["fecha"],
    y=df_tc["usd_blue"],
    mode="lines",
    connectgaps=True,
    line=dict(color="#2ECC71", width=3, dash='dot'),
    name="USD Blue"
))

fig_tc.update_layout(
    paper_bgcolor="#0B2C66",
    plot_bgcolor="#0B2C66",
    font=dict(family="Segoe UI", size=13, color="white"),
    height=300,
    margin=dict(l=25, r=25, t=100, b=30),

    title=dict(
        text=f"<b>Tipo de Cambio (USD Oficial y Blue)</b><br><span style='font-size:14px'>{ultimo_mes_tc}</span>",
        x=0.01,
        y=0.92,
        xanchor='left',
        yanchor='top',
        font=dict(size=18, color="white")
    ),

    annotations=[
        dict(
            x=-0.045,
            y=1.35,
            xref="paper", yref="paper",
            showarrow=False,
            text=f"<span style='font-size:20px'><b>Oficial: {ultimo_valor_usd_oficial:,.0f} | Blue: {ultimo_valor_usd_blue:,.0f}</b></span>",
            font=dict(color="white"),
            align="left"
        )
    ],

    xaxis=dict(
        title="",
        showgrid=False,
        tickvals=tickvals,
        ticktext=[d.strftime('%b\n%Y') for d in tickvals],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    yaxis=dict(
        range=[min_y, max_y],
        title="USD/ARS",
        showgrid=False,
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    hovermode="x unified",
    showlegend=True,
    legend=dict(
        orientation="h",
        y=-0.2,
        x=0.5,
        xanchor='center',
        font=dict(size=11, color="white")
    )
)

fig_tc.show()

# Filtrado fechas
df_cny = df_cny[df_cny["fecha"].between("2024-08-01", "2025-04-30")].reset_index(drop=True)


# Creamos los tickvals (uno por mes)
tickvals = pd.date_range(start="2024-08-01", end="2025-04-30", freq="MS")

# Último valor y mes
ultimo_valor_cny = df_cny["cny_oficial"].dropna().iloc[-1]
ultimo_mes_cny = df_cny["fecha"].dt.strftime("%B %Y").iloc[-1]

# Rango dinámico para eje Y
min_y = df_cny["cny_oficial"].min() * 0.95
max_y = df_cny["cny_oficial"].max() * 1.05

# Gráfico
fig_cny = go.Figure()

fig_cny.add_trace(go.Scatter(
    x=df_cny["fecha"],
    y=df_cny["cny_oficial"],
    fill="tozeroy",
    mode="lines",
    connectgaps=True,
    line=dict(color="#2ECC71", width=3),  # Azul oscuro
    name="CNY Oficial"
))

fig_cny.update_layout(
    paper_bgcolor="#0B2C66",
    plot_bgcolor="#0B2C66",
    font=dict(family="Segoe UI", size=13, color="white"),
    height=300,
    margin=dict(l=25, r=25, t=100, b=30),

    title=dict(
        text=f"<b>Tipo de Cambio (CNY/ARS)</b><br><span style='font-size:14px'>{ultimo_mes_cny}</span>",
        x=0.01,
        y=0.92,
        xanchor='left',
        yanchor='top',
        font=dict(size=18, color="white")
    ),

    annotations=[
        dict(
            x=-0.035,
            y=1.35,
            xref="paper", yref="paper",
            showarrow=False,
            text=f"<span style='font-size:24px'><b>{ultimo_valor_cny:,.1f}</b></span>",
            font=dict(color="white"),
            align="left"
        )
    ],

    xaxis=dict(
        title="",
        showgrid=False,
        tickvals=tickvals,
        ticktext=[d.strftime('%b\n%Y') for d in tickvals],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    yaxis=dict(
        title="CNY/ARS",
        range=[min_y, max_y],
        showgrid=False,
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    hovermode="x unified",
    showlegend=False
)

fig_cny.show()

# Descargar Merval (^MERV)
merval = yf.download("^MERV", start="2024-08-01", end="2025-04-30")
merval_close = merval.xs("Close", axis=1, level="Price")
merval = merval_close.rename(columns={"^MERV": "merval_ars"}).reset_index()
merval = merval.rename(columns={"Date": "fecha"})

# USD Blue (ya lo habías traído antes, asegurate que esté filtrado bien)
df_usd_blue = df_usd_blue[df_usd_blue["fecha"].between("2024-08-01", "2025-04-30")]

# Merge
df_merval = pd.merge(merval, df_usd_blue, on="fecha", how="inner")
df_merval["merval_usd"] = df_merval["merval_ars"] / df_merval["usd_blue"]
df_merval = df_merval.sort_values("fecha").reset_index(drop=True)

# Crear ticks del eje X
tickvals = pd.date_range(start="2024-08-01", end="2025-04-30", freq="MS")

# Último valor y mes
ultimo_valor_merval = df_merval["merval_usd"].dropna().iloc[-1]
ultimo_mes_merval = df_merval["fecha"].dt.strftime("%B %Y").iloc[-1]

# Rango dinámico para eje Y
min_y = df_merval["merval_usd"].min() * 0.95
max_y = df_merval["merval_usd"].max() * 1.05

# Gráfico
fig_merval = go.Figure()

fig_merval.add_trace(go.Scatter(
    x=df_merval["fecha"],
    y=df_merval["merval_usd"],
    fill="tozeroy",
    mode="lines",
    connectgaps=True,
    line=dict(color="#FF5733", width=3),
    name="Merval en USD"
))

fig_merval.update_layout(
    paper_bgcolor="#0B2C66",
    plot_bgcolor="#0B2C66",
    font=dict(family="Segoe UI", size=13, color="white"),
    height=300,
    margin=dict(l=25, r=25, t=100, b=30),

    title=dict(
        text=f"<b>Merval en USD</b><br><span style='font-size:14px'>{ultimo_mes_merval}</span>",
        x=0.01,
        y=0.92,
        xanchor='left',
        yanchor='top',
        font=dict(size=18, color="white")
    ),

    annotations=[
        dict(
            x=-0.035,
            y=1.35,
            xref="paper", yref="paper",
            showarrow=False,
            text=f"<span style='font-size:24px'><b>{ultimo_valor_merval:,.0f}</b></span>",
            font=dict(color="white"),
            align="left"
        )
    ],

    xaxis=dict(
        title="",
        showgrid=False,
        tickvals=tickvals,
        ticktext=[d.strftime('%b\n%Y') for d in tickvals],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    yaxis=dict(
        title="Índice en USD",
        range=[min_y, max_y],
        showgrid=False,
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    hovermode="x unified",
    showlegend=False
)

fig_merval.show()

# Cedears seleccionados
cedears = {
    "YPFD.BA": "YPF",
    "GGAL.BA": "Galicia",
    "BMA.BA": "Banco Macro",
    "MELI.BA": "MercadoLibre"
}

# Descargar precios
data = yf.download(list(cedears.keys()), start="2024-08-01", end="2025-04-30")["Close"]

# Formateo
df_cedears = data.reset_index()
df_cedears = df_cedears.rename(columns={"Date": "fecha"})

# Normalizar a 100
for ticker in cedears.keys():
    df_cedears[ticker] = (df_cedears[ticker] / df_cedears[ticker].iloc[0]) * 100

df_cedears = df_cedears.dropna().sort_values("fecha").reset_index(drop=True)

# Crear ticks del eje X
tickvals = pd.date_range(start="2024-08-01", end="2025-04-30", freq="MS")

# Gráfico
fig_cedears = go.Figure()

# Agregar una traza por Cedear
colors = ["#FF5733", "#1E90FF", "#2ECC71", "#7FDBFF"]  # Paleta compatible
for i, (ticker, name) in enumerate(cedears.items()):
    fig_cedears.add_trace(go.Scatter(
        x=df_cedears["fecha"],
        y=df_cedears[ticker],
        mode="lines",
        connectgaps=True,
        name=name,
        line=dict(width=2, color=colors[i % len(colors)])
    ))

fig_cedears.update_layout(
    paper_bgcolor="#0B2C66",
    plot_bgcolor="#0B2C66",
    font=dict(family="Segoe UI", size=13, color="white"),
    height=300,
    margin=dict(l=25, r=25, t=80, b=30),

    title=dict(
        text=f"<b>Evolución principales acciones</b>",
        x=0.01,
        y=0.92,
        xanchor='left',
        yanchor='top',
        font=dict(size=18, color="white")
    ),

    xaxis=dict(
        title="",
        showgrid=False,
        tickvals=tickvals,
        ticktext=[d.strftime('%b\n%Y') for d in tickvals],
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    yaxis=dict(
        title="Índice base 100",
        showgrid=False,
        tickfont=dict(color="white"),
        ticks="outside"
    ),
    hovermode="x unified",
    legend=dict(
        orientation="h",
        y=-0.25,
        x=0.5,
        xanchor='center',
        font=dict(size=11, color="white")
    )
)

fig_cedears.show()





import requests
import pandas as pd

# Endpoint general de variables (últimos valores disponibles)
url = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias"
response = requests.get(url, verify=False)

if response.status_code == 200:
    variables = pd.DataFrame(response.json()["results"])

else:
    print("Error:", response.status_code, response.text)

# Variables disponibles
variables

variables.to_csv("variables.csv", index=False)

import requests
import pandas as pd
import plotly.graph_objects as go


# PARÁMETROS

id_variable = 15 # ID variable (Reservas = 1)
fecha_inicio = "2024-01-01"
fecha_fin = "2025-03-25"


# DESCARGAR SERIE DE TIEMPO


url_data = f"https://api.bcra.gob.ar/estadisticas/v3.0/monetarias/{id_variable}"
params = {"desde": fecha_inicio, "hasta": fecha_fin, "limit": 3000}
r = requests.get(url_data, params=params, verify=False)

if r.status_code == 200:
    data = r.json()["results"]
    df_v = pd.DataFrame(data)
    df_v["fecha"] = pd.to_datetime(df_v["fecha"])
    df_v = df_v[["fecha", "valor"]]
else:
    raise Exception("Error al obtener variables")


# OBTENER COTIZACIÓN USD


url_usd = "https://api.bcra.gob.ar/estadisticascambiarias/v1.0/Cotizaciones/USD"
params_usd = {
    "fechadesde": fecha_inicio,
    "fechahasta": fecha_fin,
    "limit": 1000
}
r_usd = requests.get(url_usd, params=params_usd, verify=False)
data_usd = r_usd.json()["results"]

usd_registros = []
for dia in data_usd:
    fecha = dia["fecha"]
    for cot in dia["detalle"]:
        usd_registros.append({
            "fecha": fecha,
            "tipoCotizacion": cot["tipoCotizacion"]
        })

df_usd = pd.DataFrame(usd_registros)
df_usd["fecha"] = pd.to_datetime(df_usd["fecha"])
df_usd = df_usd.groupby("fecha").mean().reset_index()

# =============================


# Obtener el nombre de la variable desde la API (último valor disponible)
# Para mostrarlo en el gráfico
url_var_info = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias"
res_info = requests.get(url_var_info, verify=False)
if res_info.status_code == 200:
    df_info = pd.DataFrame(res_info.json()["results"])
    nombre_variable = df_info[df_info["idVariable"] == id_variable].iloc[0]["descripcion"]
else:
    nombre_variable = f"Variable ID {id_variable}"  # fallback en caso de error

# Renombrar columna de valor con el nombre de la variable
df_v = df_v.rename(columns={"valor": nombre_variable})


# UNIR AMBAS SERIES

df = pd.merge(df_v, df_usd, on="fecha", how="inner")


# GRAFICAR


fig = go.Figure()


# Serie de la variable (ej. Reservas)
fig.add_trace(go.Scatter(
    x=df["fecha"],
    y=df[nombre_variable],
    mode='lines',
    name=nombre_variable,
    yaxis="y1"
))

# Serie del tipo de cambio USD
fig.add_trace(go.Scatter(
    x=df["fecha"],
    y=df["tipoCotizacion"],
    mode='lines',
    name='Tipo de Cambio USD',
    yaxis="y2"
))

# Layout con doble eje Y
fig.update_layout(
    title=f"{nombre_variable} vs Tipo de Cambio USD (BCRA)",
    xaxis=dict(title="Fecha"),
    yaxis=dict(title=nombre_variable, titlefont=dict(color="blue"), tickfont=dict(color="blue")),
    yaxis2=dict(title="Tipo de Cambio USD", titlefont=dict(color="red"),
                tickfont=dict(color="red"), overlaying="y", side="right"),
    legend=dict(x=0.01, y=0.99),
    height=500,
    width=900
)

# Mostrar el gráfico
fig.show()

"""---

App streamlit:
https://7mwxcfvjuwjrv3jqg556xa.streamlit.app/

Ideas o referencias:
https://data.ecb.europa.eu/
"""
